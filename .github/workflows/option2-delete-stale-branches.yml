name: Delete stale branches (One Fetch)
on:
  workflow_dispatch:

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const diffOfDate = 90

            const branchPatterns = [
              { prefix: 'feature/', requireClosedPR: true },
              { prefix: 'test/', requireClosedPR: false },
              { prefix: 'release/', requireClosedPR: false },
              { prefix: 'revert-', requireClosedPR: true }
            ]


            async function fetchAllBranches() {
              let hasNextPage = true
              let endCursor = null
              let allBranches = []

              while (hasNextPage) {
                const query = `
                  query($owner: String!, $repo: String!, $cursor: String) {
                    repository(owner: $owner, name: $repo) {
                      refs(refPrefix: "refs/heads/", first: 100, after: $cursor) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          name
                          target {
                            ... on Commit { committedDate }
                          }
                        }
                      }
                    }
                  }
                `

                const result = await github.graphql(query, { owner, repo, cursor: endCursor })
                const refs = result.repository.refs
                const branches = refs.nodes

                const batch = branches.map(branch => ({
                  name: branch.name,
                  lastCommitDate: new Date(branch.target.committedDate)
                }))

                allBranches.push(...batch)

                hasNextPage = refs.pageInfo.hasNextPage
                endCursor = refs.pageInfo.endCursor
              }

              return allBranches
            }

            const allBranches = await fetchAllBranches()
            console.log(`取得したブランチ総数: ${allBranches.length}`)

            let branchesToDelete = []
            const patternStats = {}

            for (const pattern of branchPatterns) {
              const matched = allBranches.filter(branch => branch.name.startsWith(pattern.prefix))
              patternStats[pattern.prefix] = matched.length

              const mapped = matched.map(branch => ({
                name: branch.name,
                lastCommitDate: branch.lastCommitDate,
                requireClosedPR: pattern.requireClosedPR,
                pattern: pattern.prefix
              }))

              branchesToDelete.push(...mapped)

              console.log(`パターン "${pattern.prefix}": ${matched.length} ブランチ`)
              console.log(`最初のブランチ: ${matched[0]?.name || 'なし'}`)
            }

            console.log(`削除対象チェックするブランチ総数: ${branchesToDelete.length}`)

            async function isBranchCanDelete(branchName) {
              const { data: pullRequests } = await github.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${branchName}`,
                state: 'all'
              })
              if (pullRequests.length === 0) return true
              return pullRequests.every(pr => pr.state === 'closed' || pr.state === 'merged')
            }

            let totalDeleted = 0
            let totalSkipped = 0

            for (const branch of branchesToDelete) {
              const daysSince = Math.floor((Date.now() - branch.lastCommitDate.getTime()) / (1000 * 60 * 60 * 24))

              if (daysSince < diffOfDate) {
                console.log(`⏩ スキップ（最近のコミット）: ${branch.name} (${daysSince}日前)`)
                totalSkipped++
                continue
              }

              let canDelete = true
              if (branch.requireClosedPR) {
                canDelete = await isBranchCanDelete(branch.name)
              }

              if (!canDelete) {
                console.log(`🚫 スキップ（PR開放中）: ${branch.name}`)
                totalSkipped++
                continue
              }

              try {
                await github.rest.git.deleteRef({ owner, repo, ref: `heads/${branch.name}` })
                console.log(`✅ 削除完了: ${branch.name} (${daysSince}日前)`)
                totalDeleted++
              } catch (err) {
                console.log(`❌ 削除失敗: ${branch.name} (${err.message})`)
                totalSkipped++
              }
            }

            console.log('概要:')
            for (const [pattern, count] of Object.entries(patternStats)) {
              console.log(`- ${pattern.padEnd(10)}: ${count} ブランチ`)
            }
            console.log(`概要: ✅ 削除=${totalDeleted}、⏩ スキップ=${totalSkipped}`)
