name: Delete stale branches (All fetched first)
on:
  workflow_dispatch:

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const diffOfDate = 90

            let branchesToDelete = []

            const branchPatterns = [
              { prefix: 'feature/', requireClosedPR: true },
              { prefix: 'test/', requireClosedPR: false },
              { prefix: 'release/', requireClosedPR: false },
              { prefix: 'revert-', requireClosedPR: true }
            ]

            for (const pattern of branchPatterns) {
              isRevert = pattern.prefix === 'revert-'
              const refPrefix = isRevert ? 'refs/heads/' : `refs/heads/${pattern.prefix}`

              const query = `{
                repository(owner: "${owner}", name: "${repo}") {
                  refs(refPrefix: "${refPrefix}", first: 100) {
                    nodes {
                      name
                      target { ... on Commit { committedDate } }
                    }
                  }
                }
              }`

              const result = await github.graphql(query)
              let branches = result.repository.refs.nodes

              if (isRevert) {
                branches = branches.filter(branch => branch.name.startsWith('revert-'))
              }

              const mappedBranches = branches.map(branch => ({
                name: isRevert ? branch.name : `${pattern.prefix}${branch.name}`,
                lastCommitDate: new Date(branch.target.committedDate),
                requireClosedPR: pattern.requireClosedPR
              }))

              branchesToDelete.push(...mappedBranches)
              console.log(`パターン "${pattern.prefix}": ${mappedBranches.length} ブランチ`)
              console.log(`最初のブランチ: ${mappedBranches[0]?.name || 'なし'}`)
            }

            console.log(`取得したブランチ総数: ${branchesToDelete.length}`)

            async function isBranchCanDelete(branchName) {
              const { data: pullRequests } = await github.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${branchName}`,
                state: 'all'
              })

              if (pullRequests.length === 0) return true
              return pullRequests.every(pr => pr.state === 'closed' || pr.state === 'merged')
            }

            let totalDeleted = 0
            let totalSkipped = 0

            for (const branch of branchesToDelete) {
              const daysSince = Math.floor((Date.now() - branch.lastCommitDate.getTime()) / (1000 * 60 * 60 * 24))

              if (daysSince < diffOfDate) {
                console.log(`スキップ（最近のコミット）: ${branch.name} (${daysSince}日前)`)
                totalSkipped++
                continue
              }

              let canDelete = true
              if (branch.requireClosedPR) {
                canDelete = await isBranchCanDelete(branch.name)
              }

              if (!canDelete) {
                console.log(`スキップ（PR開放中）: ${branch.name}`)
                totalSkipped++
                continue
              }

              try {
                await github.rest.git.deleteRef({ owner, repo, ref: `heads/${branch.name}` })
                console.log(`削除完了: ${branch.name} (${daysSince}日前)`)
                totalDeleted++
              } catch (err) {
                console.log(`削除失敗: ${branch.name} (${err.message})`)
                totalSkipped++
              }
            }

            console.log(`概要: 削除=${totalDeleted}、スキップ=${totalSkipped}`)
