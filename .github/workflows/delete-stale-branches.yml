name: 古いブランチを自動削除

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'true の場合、実際にはブランチを削除しません（デフォルト: true）'
        required: false
        default: 'true'
      diff_or_date:
        description: '最終コミットからの経過日数（デフォルト: 90）'
        required: false
        default: '90'

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Create logs directory
        run: mkdir -p .github/logs

      - uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const { execSync } = require('child_process')
            const LOG_FILE_PATH = '.github/logs/deleted-branches.log'

            // デフォルト値を設定（push イベントの場合は inputs が undefined になるため）
            const DIFF_OR_DATE = parseInt('${{ inputs.diff_or_date }}' || '90')
            const DRY_RUN = ('${{ inputs.dry_run }}' || 'true') === 'true'

            core.info(`設定値: DRY_RUN=${DRY_RUN}, DIFF_OR_DATE=${DIFF_OR_DATE}日`)

            const branchPatterns = [
              { prefix: 'feature/', requireClosedPR: true },
              { prefix: 'test/', requireClosedPR: false },
              { prefix: 'release/', requireClosedPR: false },
              { prefix: 'revert-', requireClosedPR: true }
            ]

            function writeLog(message) {
              const timestamp = new Date().toISOString()
              const logEntry = `[${timestamp}] ${message}`
              execSync(`echo "${logEntry}" >> ${LOG_FILE_PATH}`)
            }

            // 最も古いコミットを持つ100個ブランチを取得する
            async function fetchBranches() {
              try {
                const query = `
                  query($owner: String!, $repo: String!) {
                    repository(owner: $owner, name: $repo) {
                      refs(refPrefix: "refs/heads/", first: 100) {
                        nodes {
                          name
                          target {
                            ... on Commit { committedDate }
                          }
                        }
                      }
                    }
                  }
                `

                const result = await github.graphql(query, { owner, repo })
                const branches = result.repository.refs.nodes

                const listBranches = branches.map(branch => ({
                  name: branch.name,
                  lastCommitDate: new Date(branch.target.committedDate)
                }))

                return listBranches
              } catch (error) {
                core.setFailed(`ブランチ取得エラー: ${error.message}`)
                throw error
              }
            }

            async function isDeletableBranch(branchName) {
              try {
                const { data: pullRequests } = await github.rest.pulls.list({
                  owner,
                  repo,
                  head: `${owner}:${branchName}`,
                  state: 'all'
                })

                if (pullRequests.length === 0) return true
                return pullRequests.every(pr => pr.state === 'closed' || pr.state === 'merged')
              } catch (error) {
                core.info(`PR確認エラー (${branchName}): ${error.message}`)
                return false
              }
            }

            async function filterDeletableBranches(listBranches) {
              const branchesToDelete = []
              const patternStats = {}

              for (const pattern of branchPatterns) {
                patternStats[pattern.prefix] = 0
              }

              for (const branch of listBranches) {
                const matchedPattern = branchPatterns.find(pattern => 
                  branch.name.startsWith(pattern.prefix)
                )

                if (!matchedPattern) {
                  continue
                }

                patternStats[matchedPattern.prefix]++

                const daysSince = Math.floor((Date.now() - branch.lastCommitDate.getTime()) / (1000 * 60 * 60 * 24))
                if (daysSince < DIFF_OR_DATE) {
                  continue
                }

                let canDelete = true
                if (matchedPattern.requireClosedPR) {
                  canDelete = await isDeletableBranch(branch.name)
                }

                if (!canDelete) {
                  continue
                }

                branchesToDelete.push({
                  name: branch.name,
                  lastCommitDate: branch.lastCommitDate,
                  requireClosedPR: matchedPattern.requireClosedPR,
                  pattern: matchedPattern.prefix,
                  daysSince: daysSince
                })
              }

              return { branchesToDelete, patternStats }
            }

            const listBranches = await fetchBranches()
            core.info(`取得したブランチ総数: ${listBranches.length}`)

            const { branchesToDelete, patternStats } = await filterDeletableBranches(listBranches)

            core.info(`今回削除予定: ${branchesToDelete.length} ブランチ`)

            if (branchesToDelete.length > 0) {
              if (DRY_RUN) {
                for (const branch of branchesToDelete) {
                  core.info(` [DRY-RUN] 削除対象: ${branch.name} (${branch.daysSince}日前)`)
                }
              } else {
                const branchNames = branchesToDelete.map(branch => branch.name).join(' ')
                
                try {
                  execSync(`git push origin --delete ${branchNames}`, { stdio: 'inherit' })
                  
                  core.info('✅ すべてのブランチの削除が完了しました')
                  
                  for (const branch of branchesToDelete) {
                    const logEntry = `✅ 削除完了: ${branch.name} (${branch.daysSince}日前)`
                    writeLog(logEntry)
                    core.info(logEntry)
                  }
                } catch (gitError) {
                  core.setFailed(`❌ git push --delete でエラーが発生しました: ${gitError.message}`)
                }
              }
            }

            core.info('概要:')
            for (const [pattern, count] of Object.entries(patternStats)) {
              core.info(`- ${pattern.padEnd(10)}: ${count} ブランチ`)
            }

            core.info(`概要: ✅ 削除=${branchesToDelete.length}、⏩ スキップ=${listBranches.length - branchesToDelete.length}`)

            await core.summary
              .addHeading('ブランチ削除結果')
              .addTable([
                [{data: '項目', header: true}, {data: '値', header: true}],
                ['実行モード', DRY_RUN ? 'DRY-RUN' : '実際削除'],
                ['対象期間', `${DIFF_OR_DATE}日以上`],
                ['取得ブランチ総数', listBranches.length.toString()],
                ['削除ブランチ数', branchesToDelete.length.toString()],
                ['スキップブランチ数', skippedCount.toString()]
              ])
              .addDetails('パターン別統計', 
                Object.entries(patternStats)
                  .map(([pattern, count]) => `- ${pattern}: ${count} ブランチ`)
                  .join('\n')
              )
              .write()
