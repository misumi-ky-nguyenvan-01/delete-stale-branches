name: Delete stale branches (One Fetch)
on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'true の場合、実際にはブランチを削除しません（デフォルト: true）'
        required: false
        default: 'true'
      max_deletions:
        description: '一度の実行で削除する最大ブランチ数（デフォルト: 50）'
        required: false
        default: '50'
      diff_or_date:
        description: '最終コミットからの経過日数（デフォルト: 90）'
        required: false
        default: '90'

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const { execSync } = require('child_process')
            const LOG_FILE_PATH = '.github/logs/deleted-branches.log'
            const DIFF_OR_DATE = parseInt('${{ inputs.diff_or_date }}')
            const MAX_DELETIONS = parseInt('${{ inputs.max_deletions }}')
            const DRY_RUN = '${{ inputs.dry_run }}' === 'true'

            console.log(`設定値: DRY_RUN=${DRY_RUN}, MAX_DELETIONS=${MAX_DELETIONS}, DIFF_OR_DATE=${DIFF_OR_DATE}日`)

            const branchPatterns = [
              { prefix: 'feature/', requireClosedPR: true },
              { prefix: 'test/', requireClosedPR: false },
              { prefix: 'release/', requireClosedPR: false },
              { prefix: 'revert-', requireClosedPR: true }
            ]

            function writeLog(message) {
              const timestamp = new Date().toISOString()
              const logEntry = `[${timestamp}] ${message}\n`
              console.log(message)
              execSync(`echo "${logEntry}" >> ${LOG_FILE_PATH}`)
            }

            async function fetchAllBranches() {
              let hasNextPage = true
              let endCursor = null
              let allBranches = []

              while (hasNextPage) {
                const query = `
                  query($owner: String!, $repo: String!, $cursor: String) {
                    repository(owner: $owner, name: $repo) {
                      refs(refPrefix: "refs/heads/", first: 100, after: $cursor) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          name
                          target {
                            ... on Commit { committedDate }
                          }
                        }
                      }
                    }
                  }
                `

                const result = await github.graphql(query, { owner, repo, cursor: endCursor })
                const refs = result.repository.refs
                const branches = refs.nodes

                const batch = branches.map(branch => ({
                  name: branch.name,
                  lastCommitDate: new Date(branch.target.committedDate)
                }))

                allBranches.push(...batch)

                hasNextPage = refs.pageInfo.hasNextPage
                endCursor = refs.pageInfo.endCursor
              }

              return allBranches
            }

            let allBranches = []

            try {
              allBranches = await fetchAllBranches()
            } catch (error) {
              console.error(`ブランチの取得中にエラーが発生しました: ${error.message}`)
              process.exit(1)
            }

            console.log(`取得したブランチ総数: ${allBranches.length}`)

            let branchesToDelete = []
            const patternStats = {}

            for (const pattern of branchPatterns) {
              const matched = allBranches.filter(branch => branch.name.startsWith(pattern.prefix))
              patternStats[pattern.prefix] = matched.length

              const mapped = matched.map(branch => ({
                name: branch.name,
                lastCommitDate: branch.lastCommitDate,
                requireClosedPR: pattern.requireClosedPR,
                pattern: pattern.prefix
              }))

              branchesToDelete.push(...mapped)

              console.log(`パターン "${pattern.prefix}": ${matched.length} ブランチ`)
              console.log(`最初のブランチ: ${matched[0]?.name || 'なし'}`)
            }

            console.log(`削除対象チェックするブランチ総数: ${branchesToDelete.length}`)

            async function isDeletableBranch(branchName) {
              const { data: pullRequests } = await github.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${branchName}`,
                state: 'all'
              })
              if (pullRequests.length === 0) return true
              return pullRequests.every(pr => pr.state === 'closed' || pr.state === 'merged')
            }

            let totalDeleted = 0
            let totalSkipped = 0

            for (const branch of branchesToDelete) {
              const daysSince = Math.floor((Date.now() - branch.lastCommitDate.getTime()) / (1000 * 60 * 60 * 24))

              if (daysSince < DIFF_OR_DATE) {
                console.log(`⏩ スキップ（最近のコミット）: ${branch.name} (${daysSince}日前)`)
                totalSkipped++
                continue
              }

              let canDelete = true
              if (branch.requireClosedPR) {
                canDelete = await isDeletableBranch(branch.name)
              }

              if (!canDelete) {
                console.log(`🚫 スキップ（PR開放中）: ${branch.name}`)
                totalSkipped++
                continue
              }

              try {
                if (DRY_RUN) {
                  console.log(` [DRY-RUN] 削除対象: ${branch.name}`)
                } else {
                  await github.rest.git.deleteRef({ owner, repo, ref: `heads/${branch.name}` })
                }

                writeLog(`削除完了: ${branch.name} (${daysSince}日前)`)
                totalDeleted++

                if (totalDeleted >= MAX_DELETIONS) {
                  console.log(`最大削除数 ${MAX_DELETIONS} に達しました。終了します。`)
                  console.log(`残り ${branchesToDelete.length - (branchesToDelete.indexOf(branch) + 1)} ブランチは次回実行時に削除されます`)
                  break
                }
              } catch (err) {
                console.log(`❌ 削除失敗: ${branch.name} (${err.message})`)
                totalSkipped++
              }
            }

            console.log('概要:')
            for (const [pattern, count] of Object.entries(patternStats)) {
              console.log(`- ${pattern.padEnd(10)}: ${count} ブランチ`)
            }

            console.log(`概要: ✅ 削除=${totalDeleted}、⏩ スキップ=${totalSkipped}`)

      - name: Commit log file to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/logs/deleted-branches.log
          if git diff --staged --quiet; then
            echo "変更はありません。コミットをスキップします。"
          else
            git commit -m "chore(github action log): 削除されたブランチのログを追加 - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
          fi

      - name: Upload log file as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deleted-branches-logs
          path: .github/logs/deleted-branches.log
          retention-days: 30
