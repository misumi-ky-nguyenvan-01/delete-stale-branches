name: 古いブランチを自動削除

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'true の場合、実際にはブランチを削除しません（デフォルト: true）'
        required: false
        type: boolean
        default: true
      diff_or_date:
        description: '最終コミットからの経過日数（デフォルト: 90）'
        required: false
        type: number
        default: 90

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const { execSync } = require('child_process')

            // デフォルト値を設定（push イベントの場合は inputs が undefined になるため）
            const DIFF_OR_DATE = parseInt('${{ inputs.diff_or_date }}' || '90')
            const DRY_RUN = ('${{ inputs.dry_run }}' || 'true') === 'true'


            console.log(DRY_RUN)
            console.log(DIFF_OR_DATE)

            core.info(`設定値: DRY_RUN=${DRY_RUN}, DIFF_OR_DATE=${DIFF_OR_DATE}日`)

            const branchPatterns = [
              { prefix: 'feature/', requireMergedPR: true },
              { prefix: 'test/', requireMergedPR: false },
              { prefix: 'release/', requireMergedPR: false },
              { prefix: 'revert-', requireMergedPR: true }
            ]

            // 最も古いコミットを持つ100個ブランチを取得する
            async function fetchBranches() {
              try {
                const query = `
                  query($owner: String!, $repo: String!) {
                    repository(owner: $owner, name: $repo) {
                      refs(refPrefix: "refs/heads/", first: 100) {
                        nodes {
                          name
                          target {
                            ... on Commit { committedDate }
                          }
                        }
                      }
                    }
                  }
                `

                const { repository } = await github.graphql(query, { owner, repo })
                return repository.refs.nodes.map(({ name, target }) => ({
                  name,
                  lastCommitDate: new Date(target.committedDate),
                }))
              } catch (error) {
                core.setFailed(`ブランチ取得エラー: ${error}`)
                throw error
              }
            }

            async function hasMergedPR(branchName) {
              try {
                const { data: pullRequests } = await github.rest.pulls.list({
                  owner,
                  repo,
                  head: `${owner}:${branchName}`,
                  state: 'all',
                })

                return (
                  pullRequests.length > 0 &&
                  pullRequests.some(({ merged_at }) => merged_at !== null) &&
                  pullRequests.every(({ state }) => state !== 'open')
                )
              } catch (error) {
                core.info(`PR確認エラー (${branchName}): ${error}`)
                return false
              }
            }

            const isDeletable = async ({ name, lastCommitDate }) => {
              const daysSince = (Date.now() - lastCommitDate.getTime()) / (1000 * 60 * 60 * 24)
              if (daysSince < DIFF_OR_DATE) return false

              const matchedPattern = branchPatterns.find(({ prefix }) => name.startsWith(prefix))
              if (!matchedPattern) return false

              return !matchedPattern.requireMergedPR || await hasMergedPR(name)
            }

            const branchesFetched = await fetchBranches()
            core.info(`取得したブランチ総数: ${branchesFetched.length}`)

            const branchesToDelete = []
            for (const branch of branchesFetched) {
              if (await isDeletable(branch)) {
                branchesToDelete.push(branch)
              }
            }

            core.info(`今回削除予定: ${branchesToDelete.length} ブランチ`)

            if (branchesToDelete.length > 0 && !DRY_RUN) {
              try {
                const branchNames = branchesToDelete.map(({ name }) => name).join(' ')
                execSync(`git push origin --delete ${branchNames}`, { stdio: 'inherit' })
                core.info('✅ すべてのブランチの削除が完了しました')
              } catch (error) {
                core.setFailed(`❌ git push --delete でエラーが発生しました: ${error}`)
                throw error
              }
            }

            core.summary
              .addHeading(DRY_RUN ? '削除対象ブランチ（DRY-RUN）' : 'ブランチ削除結果')
              .addTable([
                [{ data: '項目', header: true }, { data: '詳細', header: true }],
                ['Stale判定条件', `${DIFF_OR_DATE}日以上コミットがないもの`],
                ['取得ブランチ数', branchesFetched.length],
                ['削除ブランチ数', branchesToDelete.length],
            ])
            .addList(branchesToDelete.map(({ name, lastCommitDate }) => `${lastCommitDate.toLocaleDateString()}: ${name}`))
            .write()
